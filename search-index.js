var searchIndex = {};
searchIndex['midi'] = {"items":[[0,"","midi","Midi types and traits for Rust",null,null],[4,"Channel","","Represents a Midi channel",null,null],[13,"Ch1","","",0,null],[13,"Ch2","","",0,null],[13,"Ch3","","",0,null],[13,"Ch4","","",0,null],[13,"Ch5","","",0,null],[13,"Ch6","","",0,null],[13,"Ch7","","",0,null],[13,"Ch8","","",0,null],[13,"Ch9","","",0,null],[13,"Ch10","","",0,null],[13,"Ch11","","",0,null],[13,"Ch12","","",0,null],[13,"Ch13","","",0,null],[13,"Ch14","","",0,null],[13,"Ch15","","",0,null],[13,"Ch16","","",0,null],[4,"RawMessage","","",null,null],[13,"Status","","",1,null],[13,"StatusData","","",1,null],[13,"StatusDataData","","",1,null],[13,"Raw","","Raw 8-bit data, useful for SysEx",1,null],[4,"Message","","Defines the various Midi messages that can be sent",null,null],[13,"Start","","Start. Start the current sequence playing.\n(This message will be followed with Timing Clocks).",2,null],[13,"TimingClock","","Timing Clock. Sent 24 times per quarter note when synchronization\nis required.",2,null],[13,"Continue","","Continue. Continue at the point the sequence was Stopped",2,null],[13,"Stop","","Stop. Stop the current sequence.",2,null],[13,"ActiveSensing","","Active Sensing. This message is intended to be sent repeatedly to tell the receiver that a\nconnection is alive. Use of this message is optional. When initially received, the receiver\nwill expect to receive another Active Sensing message each 300ms (max), and if it does not\nthen it will assume that the connection has been terminated. At termination, the receiver\nwill turn off all voices and return to normal (non- active sensing) operation.",2,null],[13,"SystemReset","","Reset. Reset all receivers in the system to power-up status. This should be used sparingly,\npreferably under manual control. In particular, it should not be sent on power-up.",2,null],[13,"AllSoundOff","","All Sound Off. When All Sound Off is received all oscillators will turn off, and their\nvolume envelopes are set to zero as soon as possible.",2,null],[13,"ResetAllControllers","","Reset All Controllers. When Reset All Controllers is received, all controller values are\nreset to their default values. (See specific Recommended Practices for defaults).",2,null],[13,"LocalControlOff","","When Local Control is Off, all devices on a given channel will respond only to data\nreceived over MIDI. Played data, etc. will be ignored.",2,null],[13,"LocalControlOn","","Local Control On restores the functions of the normal controllers.",2,null],[13,"AllNotesOff","","All Notes Off. When an All Notes Off is received, all oscillators will turn off.",2,null],[13,"NoteOff","","Note Off event. This message is sent when a note is released (ended).\nThe second argument is the key (note) number.\nThe third argument is the velocity.",2,null],[13,"ProgramChange","","Program Change. This message sent when the patch number changes.\nThe second argument is the new program number.",2,null],[13,"ControlChange","","Control Change.  This message is sent when a controller value changes.\nThe second argument is the controller number (0-119, though 0-127 is allowed).\nThe third argument is the controller value (0-127).",2,null],[13,"RPN7","","7-bit RPN. This message is sent when a 7-bit RPN changes.\nThe second argument is the RPN.\nThe third argument is the value.",2,null],[13,"RPN14","","14-bit RPN. This message is sent when a 14-bit RPN changes.\nThe second argument is the RPN.\nThe third argument is the value.",2,null],[13,"NRPN7","","7-bit NRPN. This message is sent when a 7-bit NRPN changes.\nThe second argument is the NRPN.\nThe third argument is the value.",2,null],[13,"NRPN14","","14-bit NRPN. This message is sent when a 14-bit NRPN changes.\nThe second argument is the NRPN.\nThe third argument is the value.",2,null],[13,"SysEx","","System Exclusive. This message type allows manufacturers to create their own messages (such\nas bulk dumps, patch parameters, and other non-spec data) and provides a mechanism for\ncreating additional MIDI Specification messages.\nThe first argument indicates the manufacturer.\nThe second argument contains the data (without the `F0` header, or `F7` terminator).",2,null],[13,"NoteOn","","Note On event. This message is sent when a note is depressed (start).\nThe second argument is the key (note) number.\nThe third is the velocity.",2,null],[13,"PitchBend","","Pitch Bend Change. This message is sent to indicate a change in the pitch bender\n(wheel or lever, typically). The pitch bender is measured by a fourteen bit value. Center\n(no pitch change) is 2000H.",2,null],[13,"PolyphonicPressure","","Polyphonic Key Pressure (Aftertouch). This message is most often sent by pressing down\non the key after it \"bottoms out\".\nThe second argument is the key (note) number.\nThe third argument is the pressure value.",2,null],[13,"ChannelPressure","","Channel Pressure (Aftertouch). This message is most often sent by pressing down on the key\nafter it \"bottoms out\". This message is different from polyphonic after-touch. Use this\nmessage to send the single greatest pressure value (of all the current depressed keys).\nThe second argument is the pressure value.",2,null],[4,"Manufacturer","","",null,null],[13,"OneByte","","",3,null],[13,"ThreeByte","","",3,null],[0,"constants","","",null,null],[17,"NOTE_OFF","midi::constants","",null,null],[17,"NOTE_ON","","",null,null],[17,"POLYPHONIC_PRESSURE","","",null,null],[17,"CONTROL_CHANGE","","",null,null],[17,"PROGRAM_CHANGE","","",null,null],[17,"CHANNEL_PRESSURE","","",null,null],[17,"PITCH_BEND","","",null,null],[17,"SYSEX","","",null,null],[17,"MTC_QUARTER_FRAME","","",null,null],[17,"SONG_POSITION_POINTER","","",null,null],[17,"SONG_SELECT","","",null,null],[17,"TUNE_REQUEST","","",null,null],[17,"SYSEX_EOX","","",null,null],[17,"TIMING_CLOCK","","",null,null],[17,"START","","",null,null],[17,"CONTINUE","","",null,null],[17,"STOP","","",null,null],[17,"ACTIVE_SENSING","","",null,null],[17,"SYSTEM_RESET","","",null,null],[17,"CC_RPN_MSB","","",null,null],[17,"CC_RPN_LSB","","",null,null],[17,"CC_NRPN_MSB","","",null,null],[17,"CC_NRPN_LSB","","",null,null],[17,"CC_DATA_ENTRY_MSB","","",null,null],[17,"CC_DATA_ENTRY_LSB","","",null,null],[0,"utils","midi","",null,null],[5,"mask7","midi::utils","7 bit mask",null,{"inputs":[{"name":"u8"}],"output":{"name":"u7"}}],[5,"mask14","","14 bit mask",null,{"inputs":[{"name":"u16"}],"output":{"name":"u14"}}],[5,"u14_to_msb_lsb","","Extract the MSB and LSB from a `U14`",null,null],[5,"msb_lsb_to_u14","","Convert an MSB and LSB to a `U14`",null,{"inputs":[{"name":"u7"},{"name":"u7"}],"output":{"name":"u14"}}],[5,"status_byte","","Calculate the status byte for a given channel no.",null,{"inputs":[{"name":"u8"},{"name":"channel"}],"output":{"name":"u8"}}],[5,"from_status_byte","","Seperate the status from the channel no.",null,null],[11,"from_i64","midi","",0,{"inputs":[{"name":"channel"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"channel"},{"name":"u64"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"channel"},{"name":"channel"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"channel"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"channel"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"channel"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"channel"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"channel"},{"name":"channel"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"channel"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"channel"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"channel"}],"output":{"name":"channel"}}],[11,"fmt","","",0,{"inputs":[{"name":"channel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"rawmessage"},{"name":"rawmessage"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"rawmessage"},{"name":"rawmessage"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"rawmessage"},{"name":"rawmessage"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"rawmessage"},{"name":"rawmessage"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"rawmessage"},{"name":"rawmessage"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"rawmessage"},{"name":"rawmessage"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"rawmessage"},{"name":"rawmessage"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"rawmessage"},{"name":"rawmessage"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"rawmessage"}],"output":{"name":"rawmessage"}}],[11,"fmt","","",1,{"inputs":[{"name":"rawmessage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[11,"fmt","","",2,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"partial_cmp","","",3,{"inputs":[{"name":"manufacturer"},{"name":"manufacturer"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"manufacturer"},{"name":"manufacturer"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"manufacturer"},{"name":"manufacturer"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"manufacturer"},{"name":"manufacturer"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"manufacturer"},{"name":"manufacturer"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"manufacturer"},{"name":"manufacturer"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"manufacturer"},{"name":"manufacturer"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"manufacturer"},{"name":"manufacturer"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"manufacturer"}],"output":{"name":"manufacturer"}}],[11,"fmt","","",3,{"inputs":[{"name":"manufacturer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_u7s","","",3,{"inputs":[{"name":"manufacturer"}],"output":{"name":"vec"}}],[11,"to_raw_messages","","",1,{"inputs":[{"name":"rawmessage"}],"output":{"name":"vec"}}],[11,"to_raw_messages","","",2,{"inputs":[{"name":"message"}],"output":{"name":"vec"}}],[6,"U7","","",null,null],[6,"U14","","",null,null],[8,"ToRawMessages","","Convert `self` to `Vec<RawMessage>`",null,null],[10,"to_raw_messages","","",4,{"inputs":[{"name":"torawmessages"}],"output":{"name":"vec"}}]],"paths":[[4,"Channel"],[4,"RawMessage"],[4,"Message"],[4,"Manufacturer"],[8,"ToRawMessages"]]};
initSearch(searchIndex);
